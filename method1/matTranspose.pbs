#!/bin/bash
# Job name
#PBS -N matTranspose1
# Output files
#PBS -o ./pbs/matrix_transpose.o
#PBS -e ./pbs/matrix_transpose.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=0:02:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=64:mpiprocs=64:mem=256mb

# Modules for python and MPI
module load gcc91
module load mpich-3.2.1--gcc-9.1.0

# Print the name of the file that contains the list of the nodes assigned to the job and list all the nodes
NODES=$(cat $PBS_NODEFILE)
echo The running nodes are $NODES

# Get the list of unique nodes assigned to the job
NODES=$(sort -u $PBS_NODEFILE)
echo The running nodes are $NODES

# Loop through each node and get architecture information
for NODE in $NODES; do
    echo "Node: $NODE"
    ssh $NODE "lscpu"
done

# Select the working directory 
cd /home/leonardo.falsarolo/Parallel-computing-second-mid-term/9/Parallel-computing-second-mid-term/method1/bin

# the code should be previously compiled
#mpicc code_mpi.c -o code.out
#mpicxx code_mpi.cpp -o code.out
mpicxx -c main.cpp -fopenmp
mpicxx -c serialTransposition.cpp
mpicxx -c MPITransposition.cpp
mpicxx -c ompTransposition.cpp -fopenmp
mpicxx main.o serialTransposition.o MPITransposition.o ompTransposition.o -o Main -fopenmp

# Run the code
mpirun -np 8 ./Main

